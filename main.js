(()=>{"use strict";var __webpack_modules__={24:()=>{eval("\n;// CONCATENATED MODULE: ./src/js/calculator.js\nfunction sanitizeExpression(expression) {\n  var sanitized = expression.replace(/([+\\-*/%])\\1+/g, '$1').replace(/(\\s)+/g, ' ').trim();\n  var lastChar = sanitized.slice(-1);\n  if (['+', '-', '*', '/'].includes(lastChar)) {\n    sanitized = sanitized.slice(0, -1).trim();\n  }\n  sanitized = sanitized.replace(/([+\\-*/])\\s*\\.$/, '$10');\n  return sanitized;\n}\nfunction intoPostfixNotation(infixValue) {\n  var stack = [];\n  var output = [];\n  var precedence = {\n    '+': 1,\n    '-': 1,\n    '*': 2,\n    '/': 2,\n    '%': 3\n  };\n  infixValue.forEach(function (token) {\n    if (!isNaN(token)) {\n      output.push(token);\n    } else if (['+', '-', '*', '/', '%'].includes(token)) {\n      if (token === '%') {\n        var prevNumber = output.pop();\n        var previousValue = output.length > 0 ? output[output.length - 1] : null;\n        if (previousValue && !isNaN(previousValue)) {\n          var percentageValue = Number(prevNumber) / 100 * Number(previousValue);\n          output.push(percentageValue.toString());\n        } else {\n          output.push((Number(prevNumber) / 100).toString());\n        }\n      } else {\n        while (stack.length && precedence[token] <= precedence[stack[stack.length - 1]]) {\n          output.push(stack.pop());\n        }\n        stack.push(token);\n      }\n    }\n  });\n  while (stack.length) {\n    output.push(stack.pop());\n  }\n  return output;\n}\nfunction evaluatePostfix(postfix) {\n  var stack = [];\n  postfix.forEach(function (token) {\n    if (!isNaN(token)) {\n      stack.push(Number(token));\n    } else {\n      var b = stack.pop();\n      var a = stack.pop();\n      switch (token) {\n        case '+':\n          stack.push(a + b);\n          break;\n        case '-':\n          stack.push(a - b);\n          break;\n        case '*':\n          stack.push(a * b);\n          break;\n        case '/':\n          if (b === 0) {\n            stack.push('Error');\n          } else {\n            stack.push(a / b);\n          }\n          break;\n      }\n    }\n  });\n  var result = stack[0];\n  return result === 'Error' ? 'Error' : isNaN(result) ? 0 : result;\n}\n;// CONCATENATED MODULE: ./src/js/display.js\nfunction updateDisplay(displayExpression, output) {\n  displayExpression.textContent = output;\n}\n;// CONCATENATED MODULE: ./src/js/inputHandlers.js\n\n\nvar output = '';\nfunction handlePlusMinus(displayExpression) {\n  if (output.trim() === '' || output.trim() === 0) return;\n  var parts = output.trim().split(' ');\n  if (parts.length > 0 && !isNaN(parts[parts.length - 1])) {\n    var lastNumber = parts.pop();\n    if (lastNumber.startsWith('-')) {\n      lastNumber = lastNumber.slice(1);\n    } else {\n      lastNumber = '-' + lastNumber;\n    }\n    parts.push(lastNumber);\n    output = parts.join(' ');\n    updateDisplay(displayExpression, output);\n  }\n}\nfunction handleButtonClick(e, displayExpression, displayResult) {\n  if (e.target.classList.contains('btn')) {\n    var value = e.target.textContent;\n    if (value === '=') {\n      calculateResult(displayResult);\n    } else if (value === 'AC') {\n      output = '';\n      displayResult.textContent = '0';\n    } else if (['+', '-', '*', '/', '%'].includes(value)) {\n      if (output.length > 0) {\n        var lastChar = output.trim().slice(-1);\n        if (['+', '-', '*', '/', '%'].includes(lastChar)) {\n          output = output.slice(0, -2);\n        }\n        output += \" \".concat(value, \" \");\n      }\n    } else if (value === '+/-') {\n      handlePlusMinus(displayExpression);\n    } else if (value === '.') {\n      var lastNumber = output.split(/[\\s+*/%-]+/).pop();\n      if (!lastNumber.includes('.')) {\n        output += value;\n      }\n    } else {\n      output += value;\n    }\n    updateDisplay(displayExpression, output);\n  }\n}\nfunction handleKeyboardInput(e, displayExpression, displayResult) {\n  var key = e.key;\n  if (key === 'Backspace' || key === 'Delete') {\n    output = output.slice(0, -1);\n  } else if (key === 'Escape') {\n    output = '';\n    displayResult.textContent = '0';\n  } else if (['+', '-', '*', '/', '%'].includes(key)) {\n    if (output.length > 0) {\n      var lastChar = output.slice(-2, -1);\n      if (['+', '-', '*', '/', '%'].includes(lastChar)) {\n        output = output.slice(0, -3);\n      }\n      output += \" \".concat(key, \" \");\n    }\n  } else if (key === 'Enter') {\n    calculateResult(displayResult);\n  } else if (key === 'ArrowDown' || key === 'ArrowUp') {\n    handlePlusMinus(displayExpression);\n  } else if (!isNaN(key) || key === '.') {\n    var lastNumber = output.split(/[\\s+*/%-]+/).pop();\n    if (key !== '.' || !lastNumber.includes('.')) {\n      output += key;\n    }\n  }\n  updateDisplay(displayExpression, output);\n}\nfunction calculateResult(displayResult) {\n  var sanitizedOutput = sanitizeExpression(output);\n  if (sanitizedOutput.trim() === '') {\n    displayResult.textContent = '0';\n    return;\n  }\n  var postfix = intoPostfixNotation(sanitizedOutput.split(' '));\n  var result = evaluatePostfix(postfix);\n  if (result === 'Error') {\n    displayResult.textContent = result;\n    output = '';\n  } else {\n    displayResult.textContent = result;\n    output = result.toString();\n  }\n}\n;// CONCATENATED MODULE: ./src/js/theme.js\nfunction setTheme(themeName) {\n  localStorage.setItem('theme', themeName);\n  document.body.className = themeName;\n}\nfunction toggleTheme() {\n  if (localStorage.getItem('theme') === 'dark') {\n    setTheme('light');\n  } else {\n    setTheme('dark');\n  }\n}\nfunction initializeTheme(themeSwitch) {\n  var savedTheme = localStorage.getItem('theme');\n  if (savedTheme === 'dark') {\n    setTheme('dark');\n    themeSwitch.checked = true;\n  } else {\n    setTheme('light');\n    themeSwitch.checked = false;\n  }\n}\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var displayExpression = document.querySelector('.user-input');\n  var displayResult = document.querySelector('.res');\n  var buttonsContainer = document.querySelector('.buttons');\n  var themeSwitch = document.getElementById('slider');\n  initializeTheme(themeSwitch);\n  buttonsContainer.addEventListener('click', function (e) {\n    return handleButtonClick(e, displayExpression, displayResult);\n  });\n  themeSwitch.addEventListener('change', toggleTheme);\n  document.addEventListener('keydown', function (e) {\n    return handleKeyboardInput(e, displayExpression, displayResult);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n")}},__webpack_exports__={};__webpack_modules__[24]()})();